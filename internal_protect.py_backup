import sys
from lxml import etree
import logging
import sqlite3
import os
from netmiko import ConnectHandler
import csv
from datetime import datetime
import re
from netaddr import IPNetwork, IPAddress
from jnpr.junos import Device
from jnpr.junos.exception import ConnectError
from lxml import etree
from jnpr.junos.utils.config import Config
import pandas as pd
import smtplib
from email.message import EmailMessage
from modules import device


path_file_name = os.path.join("../internal_protect", 'internal_protect.log')
logging.basicConfig(level=logging.DEBUG, filename=path_file_name, format=' %(asctime)s - %(message)s')

def get_ssh_pyez_connection(host,hostname,username,password):
    device_connection = Device(host=host, user=username, passwd=password, port='22')
    try:
        device_connection.open()
        device_connection.timeout = 360
        return device_connection
    except ConnectError as error:
        if 'ConnectAuthError' in str(error):
            set_fail_host_list_file(hostname, host, 'fail_rtpr_apply.csv')
            logging.debug('[get_ssh_pyez_connection]Falha de autenticação, TACACS não habilitado no host ' + str(host) + '. ' + str(error))
            return None
        else:
            set_fail_host_list_file(hostname, host, 'fail_rtpr_apply.csv')
            logging.debug('[get_ssh_pyez_connection]Não foi possível se conectar ao host ' + str(host) + '. '+ str(error))
            return None

def set_pyez_config(host, hostname, username, password, config_text):
    device_connection = get_ssh_pyez_connection(host,hostname,username, password)
    if device_connection:
        try:
            with Config(device_connection, mode='private') as configuration:
                configuration.load(config_text, format='set')
                if configuration.diff():
                    configuration.commit(timeout=360)
                    logging.debug('[set_pyez_config]Configuração aplicada no host '+ str(hostname))
                else:
                    logging.debug('[set_pyez_config]Configuração já aplicada no host ' + str(hostname))
            device_connection.close()
        except Exception as error:
            if 'RpcError' in str(error) or 'ConfigLoadError' in str(error):
                set_fail_host_list_file(hostname, host, 'fail_rtpr_apply.csv')
                logging.debug('[set_pyez_config]Não foi possível aplicar a configuração devido ao erro ' + str(error) + ' no host ' + str(hostname))
            else:
                set_fail_host_list_file(hostname, host, 'fail_rtpr_apply.csv')
                logging.debug('[set_pyez_config]Não foi possível aplicar a configuração devido ao erro ' + str(error) + ' no host ' + str(hostname))
    else:
        logging.debug('[set_pyez_config]Não foi possível estabelecer conexão com o host ' + str(hostname))
        return None

def get_pyez_full_config(host, hostname, username, password):
    device_connection = get_ssh_pyez_connection(host,hostname,username, password)
    if device_connection:
        data = device_connection.rpc.get_config(options={'database' : 'committed'})
        full_configuration = etree.tostring(data, encoding='unicode', pretty_print=True)
        device_connection.close()
        return full_configuration
    else:
        return None

def get_netmiko_connection(host, hostname, username, password, vendor):
    if vendor == 'extreme':
        device = {'device_type': 'extreme', 'host': host, 'username': username, 'password': password, 'port' : 22, 'global_delay_factor': 4, 'banner_timeout': 200, 'conn_timeout':30, 'fast_cli': False} 
        try:
            device_connection = ConnectHandler(**device) 
            device_connection.find_prompt()
            return device_connection
        except:
            device = {'device_type': 'extreme_telnet', 'host': host, 'username': username, 'password': password, 'port' : 23, 'global_delay_factor': 2, 'banner_timeout': 5, 'conn_timeout':5, 'fast_cli': False}
        try:
            device_connection = ConnectHandler(**device)
            device_connection.find_prompt()
            return device_connection
        except Exception as error:
            logging.debug('[get_netmiko_connection]Não foi possível se conectar ao host ' + str(host) + '. Devido ao erro: ' +str(error))
            return None

    if vendor == 'juniper':
        #device = {'device_type': 'juniper_junos', 'host': host, 'username': username, 'password': password, 'port' : 22, 'global_delay_factor': 2, 'banner_timeout': 50, 'conn_timeout':20, 'fast_cli': False} 
        device = {'device_type': 'juniper_junos', 'host': host, 'username': username, 'password': password, 'port' : 22, 'global_delay_factor': 2, 'banner_timeout': 10, 'fast_cli': False}
        try:
            device_connection = ConnectHandler(**device)
            return device_connection
        except Exception as error:
            logging.debug('[get_netmiko_connection]Não foi possível se conectar ao host ' + str(host) + '. Devido ao erro: ' +str(error))
            return None

def set_juniper_netmiko_config(host, hostname, username, password, config_text):    
    device_connection = get_netmiko_connection(host, hostname, username, password, 'juniper')
    if device_connection:
        try:
            device_connection.send_config_set(config_text, delay_factor=40, cmd_verify=False)
            device_connection.commit(confirm=False, check=False)
            device_connection.disconnect()
            status = "ok"
            logging.debug('[set_juniper_netmiko_config]Configuração aplicada no host '+ str(host)+ ' ' +str(hostname))
        except Exception as error:
            logging.debug('[set_juniper_netmiko_config]Não foi possível aplicar a configuração no host ' + str(host) + ' ' + str(hostname)+ ' devido ao erro: ' +str(error))
            status = "configuration_failure"
            return None
    else:
        status = "connection_failure"
        return None

def get_juniper_netmiko_information(host, hostname, username, password, show_text):
    device_connection = get_netmiko_connection(host, hostname, username, password, 'juniper')
    if device_connection:
        try:
            output = device_connection.send_command_timing(show_text, delay_factor=10, cmd_verify=False)
            device_connection.disconnect()
            return output
        except Exception as error:
            logging.debug('[get_juniper_netmiko_information] Não foi possível obter informação do host ' + str(host) + ' ' + str(hostname)+ ' devido ao erro: ' +str(error))
            return None

def get_extreme_information(host, hostname, username, password, show_text):
    device_connection = get_netmiko_connection(host, hostname, username, password,'extreme')
    if device_connection:
        try:
            #output = device_connection.send_command(show_text,cmd_verify=False)
            device_connection.disable_paging(command='disable clipaging', delay_factor=1, cmd_verify=True, pattern=None)
            output = device_connection.send_command(show_text)
            device_connection.disconnect()
            return output
        except Exception as error:
            logging.debug('[get_extreme_information]Não foi possível obter informação do host ' + str(host) + ' ' + str(hostname)+ ' devido ao erro: ' +str(error))
            return None
    else:
        return 'connection_fail'

def get_list_from_file(filename):
    ip_list = []
    hostname_list = []
    host_list = []
    try:
        path_file_name = os.path.join("../internal_protect/utils", filename)
        with open(path_file_name) as csv_file:
            if filename == 'full_prefix_list_checked.csv':
                csv_reader = csv.reader(csv_file)
                for ip in csv_reader:
                    ip_list.append(ip[0])
                return ip_list                
            elif filename.startswith('fail'):
                csv_reader = csv.reader(csv_file, delimiter = ' ')
                for hostname, host in csv_reader:
                    hostname_list.append(hostname)
                    #host_list.append(host)
                return hostname_list                
            else:
                csv_reader = csv.reader(csv_file, delimiter = ' ')
                for ip, hostname, host in csv_reader:
                    ip_list.append(ip)
                    hostname_list.append(hostname)
                    host_list.append(host)
                return ip_list, hostname_list, host_list
    except Exception as error:
        if str(error).startswith('[Errno 2] No such file or directory'):
            if filename.startswith('fail'):
                return None
            else:
                return None, None, None
        else:
            logging.debug('[get_ip_list_from_file]Não foi possível carregar os hosts. Erro: ' + str(error))
            return None, None, None

def set_prefix_list_file(ip, hostname, host, filename):
    if not filename:
        filename = hostname
    try:
        path_file_name = os.path.join("../internal_protect/utils", filename)
        write_file = open(path_file_name, "a")
        if not hostname and not host:
            writer = csv.writer(write_file)
            writer.writerow([ip])
            write_file.close()
        else:
            writer = csv.writer(write_file, delimiter = ' ')
            writer.writerow([ip, hostname, host])
            write_file.close()
    except Exception as error:
        logging.debug('[set_prefix_list_file]Não foi possível inserir os host '+ str(host)+' '+ str(hostname)+' no arquivo. Erro: ' +str(error))

def set_fail_host_list_file(hostname, host, filename):
    try:
        path_file_name = os.path.join("../internal_protect/utils", filename)
        write_file = open(path_file_name, "a")
        writer = csv.writer(write_file)
        writer = csv.writer(write_file, delimiter = ' ')
        writer.writerow([hostname, host])
        write_file.close()
    except Exception as error:
        logging.debug('[set_fail_host_list_file]Não foi possível inserir os host '+ str(host)+' '+ str(hostname)+' no arquivo. Erro: ' +str(error))

def delete_file(filename):
    try:
        path_file_name = os.path.join("../internal_protect/utils", filename)
        if os.path.exists(path_file_name):
            os.remove(path_file_name)
            logging.debug('[delete_file] Arquivo ' + str(filename) + ' excluído com sucesso.' )
    except Exception as error:
        logging.debug('[delete_file] Não foi possível apagar o arquivo '+ str(filename)+ '.' )

def set_email(email_subject, email_content):
    try:
        mailserver = smtplib.SMTP('smtp.office365.com',587)
        mailserver.ehlo()
        mailserver.starttls()
        mailserver.login('cgr.automacao@vogeltelecom.com', 'Aut@1025')
        msg = EmailMessage()
        msg['Subject'] = email_subject
        msg['From'] = 'cgr.automacao@vogeltelecom.com'
        msg['To'] = 'nocvogel@vogeltelecom.com'
        msg['Cc'] = 'tarcisio.oliveira@vogeltelecom.com'
        msg.set_content(email_content)
        mailserver.send_message (msg)
        mailserver.quit()
    except smtplib.SMTPException as error:
    #except Exception as error:
        logging.debug('[set_email] Houve uma erro no envio de email. Erro: ' + str(error))


if __name__ == '__main__':

    username = 'oxidized'
    password = '0x1d1zed_v0ge!'


    #############################################################################################################################
    public_network_list = ['177.101.192.0/19','187.84.192.0/19','200.49.32.0/19','170.78.76.0/22','177.101.224.0/19','187.33.32.0/20','200.152.240.0/20','189.201.200.0/21','177.220.192.0/19','189.45.32.0/19','167.249.152.0/22','167.249.232.0/22','177.220.224.0/19','189.126.192.0/20','168.205.156.0/22']
    hostname_list = ['AIRSW-052','airsw-183','airsw-580','airsw-584','airsw-626','AIRSW-642-SEBRATEL','AIRSW-695','airsw-723','AIRSW-729-vetorial','Airsw-78','BA.SDR.CDA.SW.EX.147','BA.SDR.CDA.SW.EX.2','BCV-PER-01-CR-X670-001.4','BHE-PAM-01-RE-CR-X670-100','CE.FLA.LV3.SW.EX.1','CE.FLA.SPO.SW.EX.03','CE.FLA.SPO.SW.EX.2','CUV-Z07-01-CR-X670-001','MCL-STA-01-CR-X670-001','PLO-MAG-01-CR-X670-48x-001','RJ-RB1-VOZ-SW-655','RJ-SCT-VOZ-SW-032','RJ.RJO.ALG1.SW.EX.010','RJ.RJO.ALG1.SW.EX.015','RJ.RJO.ALG2.SW.EX.005','RJ.RJO.ANC.SW.EX.029','RJ.RJO.ARZ.SW.EX.030','RJ.RJO.CIT.SW.EX.007','RJ.RJO.CIV.SW.EX.021','RJ.RJO.CPG.SW.EX.003','RJ.RJO.DHC.SW.EX.028','RJ.RJO.FLA.SW.EX.027','RJ.RJO.GLB.SW.EX.001','RJ.RJO.GPK.SW.EX.009','RJ.RJO.LV3.SW.EX.011','RJ.RJO.LZN.SW.EX.103.6','RJ.RJO.MEN.SW.EX.018','RJ.RJO.PDF.SW.JN.051','RJ.RJO.PEN.SW.EX.008','RJ.RJO.PLC.SW.EX.006','RJ.RJO.PLC.SW.EX.017','RJ.RJO.RB1.SW.EX.004','RJ.RJO.RB1.SW.EX.014','RJ.RJO.SCR.SW.EX.016','RJ.RJO.SCT.SW.EX.022','RJ.RJO.SCT.SW.EX.023','RJ.RJO.TLP.SW.EX.001','RJ.RJO.TLP.SW.EX.013','RJ.RJO.TVT.SW.EX.012','RTPE-01-MG-BHE-BPT','RTPE-01-MG-BHE-SRA','RTPE-01-RJ-RJO-SCR','RTPE-01-RJ-RJO-TLP','RTPE-01-RS-PAE-HMT','RTPE-01-RS-PAE-JOA','RTPE-01-SP-SPO-BRF','RTPE-01-SP-SPO-VRAO','RTSA-01-GTI-GVI','RTSA-01-PR-CTA-LV3-POI_SW-621','RTSA-01-RS-BGV-BGO-AIRSW-577','RTSA-01-RS-BPR-BMP','RTSA-01-RS-CAN-CSU-AIRSW-197','RTSA-01-RS-CCR-CC1','RTSA-01-RS-CEN-CA2','RTSA-01-RS-CFD-CDI','RTSA-01-RS-CHN-CHN','RTSA-01-RS-CIO-CRN','RTSA-01-RS-CLB-CLB','RTSA-01-RS-CND-CD1','RTSA-01-RS-CQI-CQI','rtsa-01-rs-cza-cz2','RTSA-01-RS-DDO-GM2','RTSA-01-RS-DPO-DPO','RTSA-01-RS-DSR-DOI','RTSA-01-RS-EIO-EST','RTSA-01-RS-FCA-FCU-AIRSW-106','RTSA-01-RS-FRL-FAR','RTSA-01-RS-GAO-GRE','RTSA-01-RS-GRD-GRD','RTSA-01-RS-GTI-GTI4','RTSA-01-RS-HZA-HZA','RTSA-01-RS-IJH-IJH_SW-186','RTSA-01-RS-IJI-ISU','rtsa-01-rs-jcs-jcs','RTSA-01-RS-KDK-CCA-AIRSW-685','RTSA-01-RS-LJO-LJO','RTSA-01-RS-LVH-LVH','RTSA-01-RS-MGO-MNG','RTSA-01-RS-NPT-NP3-AIRSW-565','RTSA-01-RS-NVP-NPS','RTSA-01-RS-NVSR-NSR','RTSA-01-RS-OSR-OSR','RTSA-01-RS-PAE-POL','RTSA-01-RS-PAE-PTS','RTSA-01-RS-PAE-RNP-POI-SW525','RTSA-01-RS-PAE-VOZ_SW-224','RTSA-01-RS-PKA-PCA','RTSA-01-RS-PLT-PEL','RTSA-01-RS-PMB-PMI','RTSA-01-RS-PMM-PMI','RTSA-01-RS-POI-LV3-POI','RTSA-01-RS-SAN-SMA','RTSA-01-RS-SBY-SEB','RTSA-01-RS-SEE.SPE','rtsa-01-rs-sfp-ivd','RTSA-01-RS-SGB-PFO','RTSA-01-RS-SIA-SI2','RTSA-01-RS-SIV-SIV','RTSA-01-RS-SJA-SBSA','RTSA-01-RS-SLV-STL','RTSA-01-RS-SRO-SRO','RTSA-01-RS-SUV-SND','RTSA-01-RS-TEP-TEP','RTSA-01-RS-TES-TEF_SW-320','RTSA-01-RS-TJR-TPJ','RTSA-01-RS-TMI-TMI-AIRSW-538','RTSA-01-RS-TMI-TMI-AIRSW-538','RTSA-01-RS-TRF-TRF','RTSA-01-RS-TRI-TDI-AIRSW-684','RTSA-01-RS-TUN-HMO','RTSA-01-RS-UGN-ITQ','RTSA-01-RS-VAA-VCA','RTSA-01-RS-VAI-VEN','RTSA-01-RS-VAO-MRU','RTSA-01-RS-VAO-VM2','RTSA-01-RS.RRS.RSL','RTSA-01-RS.SCR.GAN','RTSA-01-RS.SEE.SPE','RTSA-01-RS.SHN.SDM','RTSA-01-RS.SMA.JMS-AIRSW-552','RTSA-01-RS.SMA.SMA-AIRSW-392','RTSA-01-SCR-SCL','RTSA-01-SP-AAS-ARS','RTSA-01-SP-ARQ-ARQ','RTSA-01-SP-BEP-SPS','RTSA-01-SP-BRU-BRU','RTSA-01-SP-BTU-BTU','RTSA-01-SP-CAS-DTC-TIM','RTSA-01-SP-CJR-POL','RTSA-01-SP-CNH-CNH','RTSA-01-SP-CPR-OSO','RTSA-01-SP-DDA-DDA','RTSA-01-SP-DTC-ACT-POI','RTSA-01-SP-DTC-EQ1-POI','RTSA-01-SP-DTC-EQ3-POI','RTSA-01-SP-DTC-GVT-POI','RTSA-01-SP-DTC-IBM-POI','RTSA-01-SP-DTC-LCW-POI','RTSA-01-SP-DTC-MTX-POI','RTSA-01-SP-DTC-ODT-POI','RTSA-01-SP-DTC-TMK-POI','RTSA-01-SP-DTC-TVT3-POI','rtsa-01-sp-grs-gru','RTSA-01-SP-IAQ-ITQ','RTSA-01-SP-INE-MPR','RTSA-01-SP-JAI-JAI','RTSA-01-SP-JAU-JAU','RTSA-01-SP-LEP-JAG','RTSA-01-SP-LRA-NML','RTSA-01-SP-MMM-JOS','RTSA-01-SP-MOC-ASP','RTSA-01-SP-PDI-PDI','RTSA-01-SP-PGE-STI','RTSA-01-SP-POI-CTBC-POI','RTSA-01-SP-POI-INT-POI','RTSA-01-SP-POI-NEX-POI','RTSA-01-SP-POI-OI-POI','RTSA-01-SP-POI-TIG-POI','RTSA-01-SP-RCO-ALM','RTSA-01-SP-RPO-RRP','RTSA-01-SP-RPO-SLM','RTSA-01-SP-SCN-SCS','RTSA-01-SP-SJV-SJV','RTSA-01-SP-SOC-NMS','RTSA-01-SP-SPO-ACL','RTSA-01-SP-SPO-AME','RTSA-01-SP-SPO-BRF-VOZ_SW-021','RTSA-01-SP-SPO-BRX','RTSA-01-SP-SPO-CAT','RTSA-01-SP-SPO-CSL','RTSA-01-SP-SPO-GCO','RTSA-01-SP-SPO-LIB','RTSA-01-SP-SPO-MOO','RTSA-01-SP-SPO-NVA','RTSA-01-SP-SPO-PDM','RTSA-01-SP-SPO-PJD','RTSA-01-SP-SPO-POA','RTSA-01-SP-SPO-PPH','rtsa-01-sp-spo-smr','RTSA-01-SP-SPO-STN','RTSA-01-SP-SPO-TRT','RTSA-01-SP-SPO-TTP','RTSA-01-SP-SPO-UOL-POI','RTSA-01-SP-SPO-VGE','RTSA-01-SP-SPO-VLO','RTSA-01-SP-SPO-VRO-VOZ_SW-709','RTSA-02-PAE-STC','RTSA-02-PR-CTA-LV3-POI_SW-683','RTSA-02-PR-CTA-VQM_AIRSW-457','RTSA-02-RS-LJO-LJ2','RTSA-02-RS-PAE-CGO','RTSA-02-RS-SAN-SMA','RTSA-02-RS-TES-TR1_AIRSW-432','RTSA-02-SC-PAC-GAL_SW-422','RTSA-02-SP-CAS-CAS','RTSA-02-SP-CNH-CNH','rtsa-02-sp-mmm-jos','RTSA-02-SP-OCO-OCO','RTSA-02-SP-SCN-SCS','RTSA-02-SP-SPO-CAT','RTSA-02-SP-SPO-PDM','RTSA-03-RS-PAE-CGO','RTSA-03-RS-PAE-STC','RTSA-03-RS-PAS-PA2-DC1','RTSA-03-RS-SDD-SLD','RTSA-03-SP-CAS-CAS','RTSA-03-SP-DTC-EQ2-POI','RTSA-04-RS-PAE-CGO_SW-226','RTSA-04-RS-PAE-STC','RTSA-04-SP-DTC-EQ2-POI','RTSA-05-SP-SPO-BRF','RTSA-06-PAE-STC','RTSA01-RS.FWN.FDW-airsw-444','SLA-BVT-01-CR-X670-001','SP.SPO.AIR.SW.EX.035','SP.SPO.BTU.SW.EX.072','SP.SPO.VRAO.SW.EX.002','SPO.MMM.MMM.SW.EX.002','SW-BHE-BPT-01-RE-CR-X670-100','SW-SRA-01-RE-CR-X670-100','SW-STE-01-CR-X670-001','SW-STE-01-RE-CR-X670-100','SWAC-01-RS-CFD-CDI','SWAC-01-RS-CIO-CRN','SWAC-01-RS-CQI-CQI-airsw-707','SWAC-01-RS-ESU-ELD','SWAC-01-RS-IJU-ISU','SWAC-01-RS-KDK-CCA','SWAC-01-RS-NHO-NH1','SWAC-01-RS-PAE-CGO','SWAC-01-RS-PAE-FLR','SWAC-01-RS-PAE-HMT','SWAC-01-RS-PAE-IDC','SWAC-01-RS-PAE-STC','SWAC-01-RS-PAS-SPA-AS274','SWAC-01-RS-PLT-PL2','SWAC-01-RS-PMM-CID2221-airsw-732','SWAC-01-RS-PMM-PMI','SWAC-01-RS-POI-TEL-POI','SWAC-01-RS-POI-TIM-POI-SW155','SWAC-01-RS-RGR-CID4606','SWAC-01-RS-RGR-RG2','swac-01-rs-ros-rcs','swac-01-rs-rrs-rsl','swac-01-rs-rrs-rsl','SWAC-01-RS-RZO-INFO','SWAC-01-RS-SHN-SDM','SWAC-01-RS-SJA-SBSA','SWAC-01-RS-SLG-ALG','SWAC-01-RS-SLL-SLO','SWAC-01-RS-TRI-TDI','SWAC-01-RS-VAO-VM2','SWAC-01-RS.CND.CLA-AIRSW-764','SWAC-01-RS.SMA.JMS-AIRSW-731','SWAC-01-SC-BNU-BNU_SW-597','SWAC-01-SC-CUA-CRI_SW-734','SWAC-01-SC-FNS-FNS_SW-469','SWAC-01-SC-IQI-ITA_SW-563','SWAC-01-SC-JGS-JGS_SW-505','SWAC-01-SC-PAC-GAL_SW-561','SWAC-01-SC-SBS-SBS_SW-624','SWAC-01-SP-AAS-ARS','SWAC-01-SP-ARQ-ARQ','SWAC-01-SP-BRE-ALP','SWAC-01-SP-CPR-OSO','SWAC-01-SP-DDA-DDA','SWAC-01-SP-DTC-ACT-POI','SWAC-01-SP-DTC-EQ1-POI','SWAC-01-SP-IIA-AR-52','SWAC-01-SP-JAI-JAI','SWAC-01-SP-LRA-NML','SWAC-01-SP-OCO-OCO','SWAC-01-SP-POI-TIG-POI','SWAC-01-SP-SOC-NMS','SWAC-01-SP-SPO-NVA','SWAC-01-SP-SPO-PJD','SWAC-01-SP-SPO-VGE','SWAC-02-RS-BGE-BGE','SWAC-02-RS-CAN-CSU-AIRSW-753','SWAC-02-RS-KDK-CCA-AIRSW-578','SWAC-02-RS-LJO-LJ2','SWAC-02-RS-NHO-NH1','SWAC-02-RS-PAS-SPA-AS138','SWAC-02-RS-PLT-CID1850','SWAC-02-RS-SMA-PEB','SWAC-02-RS-VAI-VEN','SWAC-02-SP-CAS-CAS','SWAC-02-SP-DTC-LV3-POI','SWAC-02-SP-SPO-TTP','SWAC-03-RS-CAM-CAM','SWAC-03-RS-DSR-DOI-AIRSW-690','SWAC-03-RS-ESU-ELD','SWAC-03-RS-ESU-ELD','SWAC-03-RS-LJO-LJ2','SWAC-03-RS-NHO-NH1','SWAC-03-RS-PAE-HMT','SWAC-03-RS-PAS-PA2','SWAC-03-RS-PLT-PL2','SWAC-03-RS-SRO-SRO','SWAC-03-RS-UGN-UGA','SWAC-03-SP-IAQ-ITQ','SWAC-04-PR-CTA-VQM_SW-679','SWAC-04-RS-BGE-BGE','SWAC-04-RS-GUB-GUA','SWAC-04-RS-KDK-CCA-ID1775','SWAC-04-RS-PAE-PTS','SWAC-04-RS-PAS-PA2','SWAC-04-RS-PAS-SPA','SWAC-04-RS-RGR-RG2','SWAC-04-RS-SLE-SLD','SWAC-04-RS-SMA-PEB','SWAC-04-RS-TQR-TQR','swac-04-rs-tri-tdi','SWAC-04-SP-STS-STS','SWAC-05-RS-CSL-UVA','SWAC-05-RS-PAE-HMT','SWAC-05-RS-PAE-STC','SWAC-05-RS-PAS-SPA','SWAC-05-RS-RGR-RG2','SWAC-05-RS-SLE-SLD','SWAC-05-SP-SPO-BRF','SWAC-05-SP-SPO-BSA','SWAC-05-SP-STS-STS','SWAC-06-SP-SPO-GMM','SWAC-06-SP-SPO-VCR','SWAC-07-RS-CSL-CID3011-AIRSW-455','SWAC-07-SP-SPO-PDM','SWAC-08-RS-CSL-UVA','SWAC-08-RS-PAE-FLR','SWAC-08-SP-SPO-PDM','SWAC-10-RS-SLL-SLO','SWAC-13-RS-PAE-STC','SWAC-14-RS-PAE-STC','SWAC-ISP-01-RS-PAE-JOA','SWAS-03-RS-GUB-GUA','VPN-IND-01-CR-X670-48x-001']
    host_list = ['172.16.184.122','172.16.17.194','172.16.24.194','172.16.184.187','172.16.212.66','172.16.61.50','10.255.0.162','172.16.68.186','172.16.235.252','172.16.0.226','10.255.147.0','10.255.5.2','10.150.109.9','10.150.247.251','10.255.6.1','10.255.6.3','10.255.6.2','10.150.109.6','10.150.109.8','10.150.109.4','10.255.0.113','10.255.0.73','10.255.4.10','10.255.4.15','10.255.4.5','10.255.4.29','10.255.4.30','10.255.4.7','10.255.4.21','10.255.4.3','10.255.4.28','10.255.4.27','10.255.4.31','10.255.4.9','10.255.4.11','11.255.103.0','10.255.4.18','11.255.51.0','10.255.4.8','10.255.4.6','10.255.4.17','10.255.4.4','10.255.4.14','10.255.4.16','10.255.4.22','10.255.4.23','10.255.4.1','10.255.4.13','10.255.4.12','10.150.21.9','10.150.49.190','172.28.22.100','172.28.24.26','172.16.1.52','172.17.45.210','172.24.138.157','172.24.166.6','172.16.62.59','172.22.0.98','172.16.129.170','172.16.181.130','172.16.5.157','10.255.0.148','172.16.83.58','172.16.248.50','172.16.179.178','10.255.0.109','172.16.175.53','172.16.143.194','10.255.0.177','172.16.140.74','172.16.117.138','172.17.12.58','172.16.14.67','172.16.153.123','172.16.46.106','172.16.15.66','172.16.51.130','172.17.9.58','172.16.165.50','10.255.0.101','172.16.20.50','172.16.152.114','172.17.3.58','172.16.69.122','172.16.142.61','172.16.2.50','172.16.104.122','172.16.42.106','172.16.40.52','172.16.113.58','172.16.12.91','172.16.8.138','172.16.172.52','172.16.249.82','10.255.0.13','172.16.22.179','172.16.45.234','10.255.0.40','172.16.157.90','172.16.0.109','172.16.180.146','10.255.0.111','10.255.0.174','172.16.21.115','10.255.0.175','172.17.16.58','172.16.203.98','172.17.18.90','10.255.0.88','172.16.213.60','172.16.253.98','172.17.11.58','172.16.50.68','172.16.145.114','10.255.0.43','172.17.23.58','172.16.236.74','172.16.222.186','172.16.22.210','172.16.206.58','172.16.92.58','172.16.36.106','172.16.169.154','172.16.225.138','172.17.14.60','172.16.81.139','172.16.155.194','10.255.0.190','172.16.205.178','172.16.188.82','172.16.81.154','10.255.3.89','10.255.3.16','10.255.3.72','10.255.3.15','10.255.3.14','10.255.3.93','10.255.3.22','10.255.3.13','10.255.3.12','10.255.3.60','10.255.3.75','10.255.3.7','10.255.3.108','10.255.3.55','10.255.3.134','10.255.3.70','10.255.3.26','10.255.3.104','10.255.3.57','10.255.3.127','10.255.3.67','10.255.3.107','10.255.3.6','10.255.3.18','10.255.3.73','10.255.3.27','10.255.3.99','10.255.3.92','10.255.3.110','10.255.3.74','10.255.3.5','10.255.3.56','10.255.3.97','10.255.3.49','10.255.3.105','10.255.3.87','172.24.106.3','10.255.3.51','10.255.3.17','10.255.3.44','10.255.3.109','10.255.3.53','10.255.3.58','10.255.3.82','10.255.0.52','10.255.3.54','10.255.3.139','10.255.3.37','10.255.3.41','10.255.3.81','10.255.3.1','10.255.3.20','10.255.3.19','10.255.3.90','10.255.3.33','10.255.3.80','10.255.3.66','10.255.3.9','10.255.3.79','10.255.3.43','10.255.3.34','10.255.3.38','10.255.3.137','172.24.70.11','172.16.184.91','172.22.0.162','172.22.0.2','172.16.142.139','172.16.9.252','172.16.180.52','172.17.4.58','172.20.0.2','10.255.3.11','10.255.3.65','10.255.3.135','10.255.3.126','10.255.3.78','10.255.3.42','10.255.3.68','172.16.61.74','172.16.184.227','172.16.103.218','172.16.135.154','10.255.3.59','10.255.3.122','172.16.186.51','172.16.249.90','10.255.3.136','10.255.3.3','172.16.0.90','10.255.0.120','10.150.109.5','10.255.3.35','172.24.79.2','172.24.70.2','172.24.15.2','10.150.247.252','10.150.247.254','10.150.109.3','10.150.247.253','172.16.248.90','10.255.0.38','10.255.0.178','172.16.34.218','172.16.152.66','172.16.69.91','172.16.37.99','172.16.186.154','172.16.4.178','172.17.25.66','172.16.187.82','172.16.184.228','172.16.103.107','172.16.235.178','10.255.0.163','172.16.157.122','172.16.184.178','172.16.184.114','172.16.138.154','172.16.138.202','172.16.23.114','10.255.0.176','172.17.14.58','10.255.0.156','172.16.119.146','172.17.18.58','172.16.208.58','172.16.234.51','172.16.222.146','172.16.225.146','172.16.143.195','172.16.200.52','172.20.11.10','172.20.1.98','172.20.4.10','172.20.8.10','172.20.5.10','172.20.0.50','172.20.16.10','10.255.3.102','10.255.3.71','10.255.3.36','10.255.3.64','10.255.3.91','10.255.3.50','10.255.3.8','10.255.3.52','10.255.3.25','10.255.3.100','10.255.3.147','10.255.3.77','10.255.3.61','10.255.3.40','10.255.3.141','10.255.3.76','172.16.250.122','172.17.44.50','172.16.69.114','172.16.142.107','172.16.88.50','172.16.52.75','172.16.96.66','172.17.2.114','172.16.36.138','10.255.3.88','10.255.3.62','10.255.3.84','172.16.26.186','172.17.29.146','172.16.85.58','172.31.96.90','172.16.142.114','172.16.88.51','172.16.58.91','172.16.39.187','172.16.235.50','172.16.213.58','172.16.202.60','10.255.3.131','172.22.0.138','172.16.250.50','172.16.233.50','172.16.69.106','172.17.30.50','172.16.90.146','172.16.52.76','172.16.138.204','172.17.32.66','172.17.2.50','172.16.49.98','172.16.222.162','10.255.3.2','172.17.17.82','172.16.58.70','172.16.211.219','172.16.103.210','172.16.138.74','172.16.35.90','10.255.3.4','10.255.3.83','10.255.3.121','10.255.3.39','10.255.3.132','172.31.96.36','10.255.3.86','172.31.96.34','172.16.4.90','10.255.3.113','172.16.234.50','172.16.187.187','172.16.249.138','172.16.9.222','172.16.233.98','10.150.109.2']
    #############################################################################################################################
    ## OBTEM TODOS OS IPs VÁLIDOS DOS SWITCHS EXTREME ##
    '''delete_file('fail_get_ip_list.csv')
    for count, host in enumerate(host_list):
        ip_list = []
        command_result = get_extreme_information(host, hostname_list[count], username, password, 'show iproute origin direct vr IP-CORP | include "#d   "')   
        if command_result:
            if command_result == 'connection_fail':
                set_fail_host_list_file(hostname_list[count], host, 'fail_get_ip_list.csv')
                logging.debug('Não foi possível se conectar ao host ' + str(hostname_list[count]) )                
            else:
                command_result = command_result.split()
                for row in command_result:
                    if re.search('^[0-9][0-9]?[0-9]?.[0-9][0-9]?[0-9]?.[0-9][0-9]?[0-9]?.[0-9][0-9]?[0-9]?$', row):
                        #ip_list.append(str(row)+'/32')
                        ip_list.append(row)
                delete_file(hostname_list[count])
                if ip_list:
                    for ip in ip_list:
                        set_prefix_list_file(ip, hostname_list[count], host, None) 
                else:
                    logging.debug('Não existe IP válido configurado no host ' + str(hostname_list[count]))
                    delete_file(hostname_list[count])
        else:
            logging.debug('Não existe IP válido configurado no host ' + str(hostname_list[count]))
            delete_file(hostname_list[count])
    #print('Processo concluído')
    #exit()'''
    #############################################################################################################################
    ## SALVA TODOS OS IPs VÁLIDOS OBTIDOS DOS SWITCHS EXTREME EM UM ARQUIVO ## 
    delete_file('full_prefix_list.csv')
    for hostname in hostname_list:
        ip_list, hostname_list, host_list = get_list_from_file(hostname)
        if ip_list:
            for count, ip in enumerate(ip_list):
                for network in public_network_list:
                    if IPAddress(ip) in IPNetwork(network):    
                        set_prefix_list_file(str(ip)+'/32', None, None, 'full_prefix_list.csv')
                        #set_prefix_list_file(str(ip)+'/32', hostname, host_list[count], 'full_prefix_list.csv')
    # Remove Duplicate
    original_file = os.path.join("../internal_protect/utils", 'full_prefix_list.csv')
    df = pd.read_csv(original_file)
    df.drop_duplicates(subset=None, inplace=True)
    # Write the results to a different file
    result_file = os.path.join("../internal_protect/utils", 'full_prefix_list_checked.csv')
    file_name_output = result_file
    df.to_csv(file_name_output, index=False)
    #print('Processo concluído')
    #exit()
    #############################################################################################################################
    ## APLICA AS CONFIGURAÇÕES NOS RTPRs ##
    delete_file('fail_rtpr_apply.csv')
    rtpr_host_list = ['10.255.211.0', '10.255.214.0', '172.28.0.180', '172.28.24.23', '10.255.255.248', '10.255.253.1', '10.254.255.1', '187.1.95.192', '187.1.95.194' ]
    rtpr_hostname_list = ['RTPR-01-SP-SPO-BRF', 'RTPR-01-SP-SPO-VRO', 'RTPR-01-RJ-RJO-SCR-RE0', 'RTPR-01-RJ-RJO-TLP-RE0', 'cgborder-rs-pae-01', 'rtpr-01-pr-cta-vqm', 'xgborder-sc-pac-01','SPO-VRO-01-RE-PE-M104-200', 'RT-COR-MX80-STE-01']
    #rtpr_host_list = ['187.1.95.194']
    #rtpr_hostname_list = ['RT-COR-MX80-STE-01']
    config_text = 'delete policy-options prefix-list internal_protocol_local\n edit policy-options prefix-list internal_protocol_local '
    ip_list = get_list_from_file('full_prefix_list_checked.csv')
    for ip in ip_list:
        config_text = config_text + '\n' + 'set ' + str(ip)
    for count, rtpr in enumerate(rtpr_host_list):
        if rtpr.startswith('187.'):
            username = 'vV0ge1_CgR'
            password = '#V0ge!-@Te1ec0m_'
            if rtpr == '187.1.95.194':
                public_network_advertised = []
                local_ip_list = []
                device.show_command_result = get_juniper_netmiko_information('187.1.95.194', 'RT-COR-MX80-STE-01', username, password, 'show route advertising-protocol bgp 187.1.89.208 | no-more')
                #show_command_result = get_juniper_netmiko_information('187.1.95.194', 'RT-COR-MX80-STE-01', username, password, 'show route advertising-protocol bgp 187.1.89.208 | no-more')
                show_command_result = show_command_result.split()
                for row in show_command_result:
                    if re.search('^[0-9][0-9]?[0-9]?.[0-9][0-9]?[0-9]?.[0-9][0-9]?[0-9]?.[0-9][0-9]?[0-9]?/[0-9][0-9]$', row):
                            public_network_advertised.append(row)
                config_text = 'delete policy-options prefix-list internal_protocol_local\n edit policy-options prefix-list internal_protocol_local '
                for ip in ip_list:
                    for network in public_network_advertised:
                        ip_aux = ip.replace('/32', '')
                        if IPAddress(ip_aux) in IPNetwork(network):    
                            config_text = config_text + '\n' + 'set ' + str(ip)
                            local_ip_list.append(ip)
                if local_ip_list:
                    device.set_juniper_netmiko_config(rtpr, rtpr_hostname_list[count], username, password, config_text)
                    #set_juniper_netmiko_config(rtpr, rtpr_hostname_list[count], username, password, config_text)
                else:
                    logging.debug('Nenhuma configuração aplicada no host ' + str(rtpr_hostname_list[count]) + '. Os IPs não pertencem a prefixos anunciadas ao PNI Google-MG.')
            else:
                device.set_pyez_config(rtpr, rtpr_hostname_list[count],username, password, config_text)
                #set_pyez_config(rtpr, rtpr_hostname_list[count],username, password, config_text)
        else:
            device.set_pyez_config(rtpr, rtpr_hostname_list[count],username, password, config_text)
            #set_pyez_config(rtpr, rtpr_hostname_list[count],username, password, config_text)
    print('Processo concluído')
    exit()
    #############################################################################################################################
    ## REALIZA NOTIFICAÇÃO VIA EMAIL EM CASO DE FALHA ##
    hostname_failure_list = get_list_from_file('fail_get_ip_list.csv')
    rtpr_failure_list = get_list_from_file('fail_rtpr_apply.csv')
    if hostname_failure_list and rtpr_failure_list:
        email_subject = '[Notificação de falha] Bloqueio externo SW Extreme'
        email_content = 'Não foi possível se conectar aos seguintes switchs:'
        for hostname in hostname_failure_list:
            email_content = email_content + '\n' + str(hostname)
        email_content = str(email_content) + '\n\n'
        email_content = email_content + 'Não foi possível aplicar as configurações nos seguintes RTPRs:'
        for rtpr in rtpr_failure_list:
            email_content = email_content + '\n' + str(rtpr)
        email_content = str(email_content) + '\n\n'
        set_email(email_subject, email_content)
        logging.debug('Processo concluído')
        #print('Processo concluído')
        exit()
    elif hostname_failure_list:
        email_subject = '[Notificação de falha] Bloqueio externo SW Extreme'
        email_content = 'Não foi possível se conectar aos seguintes switchs:'
        for hostname in hostname_failure_list:
            email_content = email_content + '\n' + str(hostname)
        email_content = str(email_content) + '\n\n'
        set_email(email_subject, email_content)
        logging.debug('Processo concluído')
        #print('Processo concluído')
        exit()
    elif rtpr_failure_list:
        email_subject = '[Notificação de falha] Bloqueio externo SW Extreme'
        email_content = 'Não foi possível aplicar as configurações nos seguintes RTPRs:'
        for rtpr in rtpr_failure_list:
            email_content = email_content + '\n' + str(rtpr)
        email_content = str(email_content) + '\n\n'
        set_email(email_subject, email_content)
    else:
        logging.debug('Processo concluído')
        #print('Processo concluído')
        exit()

    #TESTAR LIBRARY PyExOS https://github.com/LINXNet/pyexos
    #LIVRO PYENG https://pyneng.readthedocs.io/en/latest/contents.html